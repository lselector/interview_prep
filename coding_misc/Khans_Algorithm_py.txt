#! python3

"""
#   Topological sort - Khan's Algorithm
#       https://en.wikipedia.org/wiki/Topological_sorting
#
#   Given a list of projects and a list of project dependencies, 
#   output a valid build order. 
#   If there is no build order, return a string saying so. 
#   
#   Example:
#   
#   input: 
#     projects=[1,2,3,4,5,6]
#     dependencies = [(1,3), (3,2), (3,4), (5,6)]  
#        # (m, n) where n is a dependency of m
#        # meaning that we need to run "n" before "m"
#   
#   output: 
#     [2, 4, 6, 3, 5, 1]
"""


from queue import Queue


def top_sort(projects, dependencies):
    order = []
    degrees = {project: 0 for project in projects}
    dependency_dict = {project: [] for project in projects}
    
    for project, dependency in dependencies:
        dependency_dict[dependency].append(project)
        degrees[project] += 1


    queue = Queue()


    for p in projects:
        if degrees[p] == 0:
            queue.put(p)
            order.append(p)
  
    while not queue.empty():
        p = queue.get()
        
        for n in dependency_dict[p]:
            degrees[n] -= 1
            if degrees[n] == 0:
                queue.put(n)
                order.append(n)


    if len(projects) != len(order):
         return "Cycle, no valid order"


    return order

# This is also referred to as "Khan's Algorithm". 
# Another implementation involves using DFS. 
# Both have time complexity O(p + d) 
# where p is the number of projects (or vertices) 
# and d is the number of dependencies (or edges).
