#! python3

"""
# invert binary tree
#      4                           4     
#    /   \                       /   \   
#   2     7       ==>           7     2  
#  / \   / \                   / \   / \ 
# 1   3 6   9                 9   6 3   1
#
"""

# --------------------------------------------------------------
class TreeNode():  
    # ---------------------------------
    def __init__(self, x):  
        self.key   = x 
        self.left  = None
        self.right = None

# --------------------------------------------------------------
def insertIntoBST(tmp, val):
    """
    # inserts value in a binary (sub)tree starting with node "tmp"
    # and returns the node (reference)
    """
    if(tmp == None): 
        return TreeNode(val);

    if(tmp.key < val): 
        tmp.right = insertIntoBST(tmp.right, val);
    else: 
        tmp.left  = insertIntoBST(tmp.left, val);

    return(tmp)

# --------------------------------------------------------------
def in_order_print(tmp): 
    """ 
    # Inorder traversal of a binary tree
    """
  
    if (not tmp): 
        return
  
    in_order_print(tmp.left)  
    print(tmp.key,end = " ")
    in_order_print(tmp.right)

# --------------------------------------------------------------
def inv_tree_recurs(tmp):
    if tmp:
        tmp.left, tmp.right = (
            inv_tree_recurs(tmp.right), 
            inv_tree_recurs(tmp.left)
            )
        return tmp

# --------------------------------------------------------------
def make_printTree(root):
    """
    # root: TreeNode
    # prints the tree
    # returns List[List[str]]
    """
    # ---------------------------------
    def get_height(node):
        if not node:
            return 0
        else:
            height_left  = get_height(node.left)
            height_right = get_height(node.right)
            return 1 + max(height_left, height_right)
    
    height = get_height(root)
    width  = 2 ** height - 1
    myout = [[" "] * width for i in range(height)]

    # ---------------------------------
    def update_output(myout, node, row, left, right):
        if not node:
            return
        mid = int((left + right) / 2)
        myout[row][mid] = str(node.key)
        update_output(myout, node.left, row+1 , left, mid-1)
        update_output(myout, node.right, row+1 , mid+1, right)

    # ---------------------------------
    update_output(myout, node=root, row=0, left=0, right=width-1)

    return myout

# --------------------------------------------------------------
# main execution here
# --------------------------------------------------------------
input_str = "4 2 7 1 3 6 9"
nodes = list(map(int, input_str.split()))

r = None
for n_val in nodes:
    print(f"inserting {n_val}")
    r = insertIntoBST(r, n_val)

print("finished inserting")
in_order_print(r)

r = inv_tree_recurs(r)

print("finished inverting (mirroring)")
in_order_print(r)

print("print tree in 2D")
my_2d_arr = make_printTree(r)
for row in my_2d_arr:
    print(''.join(row))
