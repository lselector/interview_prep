#! python3

# --------------------------------------------------------------
# Concatenate Words - leetcode 472
# Given a list of words (without duplicates), 
# return all words which are concatenations of shorter words in the list
# Tme complexity O(N * L^2), where N - number of words, L - length of words
# 
# Runtime: 344 ms, faster than 96.27% 
# Memory Usage: 17.1 MB, less than 50.00% 
# --------------------------------------------------------------

# --------------------------------------------------------------
from typing import Set, List, Dict

class Solution:
    # --------------------------
    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
        d = set(words)  # words
        c = dict()      # cache
        res = []        # output list
        for word in words:
            if self.mytest(word, d, c):
                res.append(word)
        return res
    
    # --------------------------
    def mytest(self, word: List[str], d: Set, c: Dict):
        if word in c:
            return c[word]
        for i in range(1, len(word)):            
            p = word[:i]  # prefix, should be a word
            if p not in d:
                continue
            s = word[i:]  # suffix, may be composite
            if (s in d) or (s in c and c[s]==True): 
                return True
            elif self.mytest(s, d, c):
                c[s]=True
                return True
            else:
                c[s]=False
                continue

        return False

input = ['catmancatsdog', 'cat', 'cats', 'dog', 'man', 'woman', 'catsdog']
print(Solution().findAllConcatenatedWordsInADict(input))
# ['catcatsdog', 'catsdog']

